service: auction-notification-service

frameworkVersion: '2'

plugins:
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  region: eu-west-1
  stage: ${opt:stage, 'dev'}
  iamRoleStatements:
    - ${file(iam/SendMailIAM.yml):SendMailIAM}
    - ${file(iam/MailQueueIAM.yml):MailQueueIAM}

resources:
  Resources:
    MailQueue: ${file(resources/MailQueue.yml):MailQueue}

  # Export MailQueue content here so we can access in from another stack
  Outputs:
    MailQueueArn: ${file(resources/MailQueue.yml):Outputs.MailQueueArn}
    MailQueueUrl: ${file(resources/MailQueue.yml):Outputs.MailQueueUrl}

functions:
  hello:
    name: notification-service-hello-${self:provider.stage}
    handler: src/handlers/hello.handler
    events:
      - http:
          method: GET
          path: /hello

  sendEmail:
    name: notification-service-sendMail-${self:provider.stage}
    handler: src/handlers/sendMail.handler

    # our sendMail function is to be triggered using sqs
    events:
      - sqs:
          arn: ${self:custom.MailQueue.arn}

          # number of messages to process at a time
          batchSize: 1

custom:
  MailQueue:
    name: MailQueue-${self:provider.stage}
    arn: !GetAtt MailQueue.Arn

    # by default !Ref for MailQueues return the URL, so no need of !GetAtt
    url: !Ref MailQueue